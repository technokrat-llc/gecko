/*  This file is part of GeckoCIRCUITS. Copyright (C) ETH Zurich, Gecko-Simulations AG
 *
 *  GeckoCIRCUITS is free software: you can redistribute it and/or modify it under 
 *  the terms of the GNU General Public License as published by the Free Software 
 *  Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *  GeckoCIRCUITS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *  PURPOSE.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  GeckoCIRCUITS.  If not, see <http://www.gnu.org/licenses/>.
 */
package ch.technokrat.gecko.geckocircuits.allg;

import java.io.*;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author andreas
 */
public final class DialogMakeExternal extends javax.swing.JDialog {
    private final byte[] _contents;
 
    private final GeckoFile _geckoFile;
    
    public static String dialogResultFabric(final GeckoFile geckoFile, final byte[] originalContents) {
        final DialogMakeExternal dialog = new DialogMakeExternal(geckoFile, originalContents);
        final String returnValue = dialog.jTextFieldPath.getText();
        
        dialog.dispose();
        
        if(returnValue.isEmpty()) {
            return null;
        }
        
        return returnValue;
    }
    
    
    private  DialogMakeExternal(final GeckoFile geckoFile, final byte[] originalContents) {
        super((java.awt.Frame) null, true);
        _contents = originalContents;
        initComponents();
        _geckoFile = geckoFile;
        jTextFieldPath.setText(_geckoFile.getCurrentAbsolutePath());
        doUpdate();
        this.setVisible(true);

    }

    private void doUpdate() {
        if (!jTextFieldPath.getText().endsWith(_geckoFile.getExtension())) {
            jTextArea1.setText("Error - file ending is not equal to: " + _geckoFile.getExtension());
            jButtonCreate.setEnabled(false);
            jButtonUseExt.setEnabled(false);
            return;
        }

        final File file = new File(jTextFieldPath.getText());

        jButtonCreate.setText("Create file");
        if (file.isDirectory()) {
            jTextArea1.setText("WARNING! File path is a directory.");
            jButtonCreate.setEnabled(false);
            jButtonUseExt.setEnabled(false);
            return;
        }

        if (file.exists()) {
            if (file.canWrite()) {
                jTextArea1.setText("WARNING! File already exists. Select if you like to\n"
                        + "overwrite with internal file contents, or alternatively\n"
                        + "use external file and discard internal file contents.\n"
                        + "Modification date on disk: " + new Date(file.lastModified())  
                        + "\nExternal file size: " + file.length() + "Bytes" 
                        + "\nInternal file size: " + _geckoFile.getContentsByte().length + " Bytes.");
                jButtonCreate.setEnabled(true);
                jButtonUseExt.setEnabled(true);
                jButtonCreate.setText("Overwrite file!");
            } else {
                jTextArea1.setText("WARNING: No write permission to output destination.");
                jButtonCreate.setEnabled(false);
                jButtonUseExt.setEnabled(false);
            }

        } else {
            if (file.getParentFile().canWrite()) {
                jTextArea1.setText("File does not yet exist. If you accept, \na new file will be created.");
                jButtonCreate.setEnabled(true);
                jButtonUseExt.setEnabled(false);
            } else {
                jTextArea1.setText("WARNING: No write permission to output destination.");
                jButtonCreate.setEnabled(false);
                jButtonUseExt.setEnabled(false);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */    
    @SuppressWarnings("PMD")   
    //CHECKSTYLE:OFF
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldPath = new javax.swing.JTextField();
        jButtonChooser = new javax.swing.JButton();
        jButtonCreate = new javax.swing.JButton();
        jButtonUseExt = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Convert internal file to external file");
        setLocationByPlatform(true);
        setModal(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("File path:");

        jTextFieldPath.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTextFieldPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldPathKeyReleased(evt);
            }
        });

        jButtonChooser.setText("  ");
        jButtonChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChooserActionPerformed(evt);
            }
        });

        jButtonCreate.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jButtonCreate.setText("Create file");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });

        jButtonUseExt.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jButtonUseExt.setText("Use file from disk");
        jButtonUseExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUseExtActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));

        jScrollPane1.setEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonUseExt, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextFieldPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreate)
                    .addComponent(jButtonUseExt)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //CHECKSTYLE:ON
    
    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event_jButtonCreateActionPerformed
        final File writeFile = new File(jTextFieldPath.getText());
        OutputStream output = null;
        try {
            output = new BufferedOutputStream(new FileOutputStream(writeFile));
            output.write(_contents);
        } catch (IOException ex) {
            Logger.getLogger(DialogMakeExternal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                output.close();
            } catch (IOException ex) {
                Logger.getLogger(DialogMakeExternal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        setVisible(false);
    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jButtonChooserActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event_jButtonChooserActionPerformed

        final FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(final File file) {
                if (file.isDirectory()) {
                    return true;
                }
                return file.getName().endsWith(_geckoFile.getExtension());
            }

            @Override
            public String getDescription() {
                return _geckoFile.getExtension();
            }
        };

        final GeckoFileChooser saveFileChooser = GeckoFileChooser.createSimpleSaveFileChooser(_geckoFile.getExtension(), this);
                
        if (saveFileChooser.getUserResult() == GeckoFileChooser.FileChooserResult.CANCEL) {            
            return;
        }

        jTextFieldPath.setText(saveFileChooser.getFileWithCheckedEnding().getAbsolutePath());
        doUpdate();

    }//GEN-LAST:event_jButtonChooserActionPerformed

    private void jTextFieldPathKeyReleased(java.awt.event.KeyEvent evt) {//NOPMD//GEN-FIRST:event_jTextFieldPathKeyReleased
        doUpdate();
    }//GEN-LAST:event_jTextFieldPathKeyReleased

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event_jButtonCancelActionPerformed
        jTextFieldPath.setText("");
        this.setVisible(false);        
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonUseExtActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event_jButtonUseExtActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButtonUseExtActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonChooser;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonUseExt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldPath;
    // End of variables declaration//GEN-END:variables
}
