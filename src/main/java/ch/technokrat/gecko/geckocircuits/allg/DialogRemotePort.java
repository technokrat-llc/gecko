/*  This file is part of GeckoCIRCUITS. Copyright (C) ETH Zurich, Gecko-Simulations AG
 *
 *  GeckoCIRCUITS is free software: you can redistribute it and/or modify it under 
 *  the terms of the GNU General Public License as published by the Free Software 
 *  Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *  GeckoCIRCUITS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *  PURPOSE.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  GeckoCIRCUITS.  If not, see <http://www.gnu.org/licenses/>.
 */
package ch.technokrat.gecko.geckocircuits.allg;

import ch.technokrat.gecko.GeckoCustomMMF;
import ch.technokrat.gecko.GeckoCustomRemote;
import ch.technokrat.gecko.GeckoRemoteInterface;
import ch.technokrat.gecko.GeckoRemoteRegistry;
import ch.technokrat.gecko.GeckoSim;
import ch.technokrat.gecko.i18n.resources.I18nKeys;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.SocketException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.ExportException;
import java.rmi.server.UnicastRemoteObject;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 * @author Andrija
 */
public final class DialogRemotePort extends javax.swing.JDialog {
    
    private String[] _localIPs;
    private String _externalIP;
    
    public DialogRemotePort(final java.awt.Frame parent, final boolean modal) {
        super(parent, modal);
        this.setLocationByPlatform(true);
        setLocationRelativeTo(parent);
        initComponents();
        doInternationalization();

        final ButtonGroup enableDisableGroup = new ButtonGroup();
        enableDisableGroup.add(_jRadioButtonEnabled);
        enableDisableGroup.add(_jRadioButtonDisabled);
        final ButtonGroup hostGroup = new ButtonGroup();
        hostGroup.add(_jRadioButtonLocalHostOnly);
        hostGroup.add(_jRadioButtonNetwork);

        _jFormattedTextFieldPort.setText(Integer.toString(GeckoRemoteRegistry.getRemoteAccessPort()));
        _jRadioButtonEnabled.setSelected(GeckoRemoteRegistry.isRemoteEnabled());
        _jRadioButtonDisabled.setSelected(!GeckoRemoteRegistry.isRemoteEnabled());
        jTextAreaRemoteTest.setText(GeckoCustomRemote.getClientInfo());
        getIPNumbers();
        final String selectedIP = GeckoRemoteRegistry.getIPAddress();
        final boolean isLocalhost = "localhost".equals(selectedIP) || "127.0.0.1".equals(selectedIP);
        _jRadioButtonLocalHostOnly.setSelected(isLocalhost);
        _jRadioButtonNetwork.setSelected(!isLocalhost);
        if (Fenster._mmf_access == null) {
            _jCheckBoxEnableMMF.setSelected(false);
        } else {
            _jCheckBoxEnableMMF.setSelected(Fenster._mmf_access.isEnabled());
            if (Fenster._mmf_access.isEnabled()) {
                _jTextFieldMMFile.setText(Fenster._mmf_access.getFile());
                _jSpinnerMMFSize.setValue((int)(Fenster._mmf_access.getFileSize() / 1024 / 1024));
            }
        }
        checkButtons();
        if (!isLocalhost) {
            setSelectedIP(selectedIP);
        }
        checkStatusMMF();
    }
    
    private void setSelectedIP(final String selectedIP) {
        boolean foundMatch = false;
        if (selectedIP.equals(_externalIP)) {
            _jComboBoxIPs.setSelectedIndex(_jComboBoxIPs.getItemCount() - 1);
            foundMatch = true;
        } else {
            for (int i = 0; i < _localIPs.length; i++) {
                if (_localIPs[i].equals(selectedIP)) {
                    _jComboBoxIPs.setSelectedIndex(i);
                    foundMatch = true;
                    break;
                }
            }
        }
        if (!foundMatch) {
            JOptionPane.showMessageDialog(this,
                    "The IP number of your machine which you previously selected\n"
                    + "has not been found. Your IP number has been either changed"
                    + "\n(if you use DHCP or VPN) or you've lost network access.",
                                        "IP number changed",
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("PMD")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _jTabbedPaneRemoteOptions = new javax.swing.JTabbedPane();
        jPanelRemoteSettings = new javax.swing.JPanel();
        _jButtonCancel = new javax.swing.JButton();
        _jPanelConnectionSettings = new javax.swing.JPanel();
        _jLabelRemote = new javax.swing.JLabel();
        _jRadioButtonEnabled = new javax.swing.JRadioButton();
        _jRadioButtonDisabled = new javax.swing.JRadioButton();
        _jLabelPort = new javax.swing.JLabel();
        _jFormattedTextFieldPort = new javax.swing.JFormattedTextField();
        _jRadioButtonLocalHostOnly = new javax.swing.JRadioButton();
        _jRadioButtonNetwork = new javax.swing.JRadioButton();
        _jLabelFrom = new javax.swing.JLabel();
        _jComboBoxIPs = new javax.swing.JComboBox();
        _jLabelByAddress = new javax.swing.JLabel();
        _jButtonOK = new javax.swing.JButton();
        _jButtonApply = new javax.swing.JButton();
        _jButtonTest = new javax.swing.JButton();
        jTextAreaRemoteTest = new javax.swing.JTextArea();
        _jButtonRefresh = new javax.swing.JButton();
        jPanelRemoteInfo = new javax.swing.JPanel();
        jTextAreaRemoteInfo = new javax.swing.JTextArea();
        jPanelMMF = new javax.swing.JPanel();
        jScrollPaneMMF = new javax.swing.JScrollPane();
        jTextAreaMMF = new javax.swing.JTextArea();
        jPanelMMFSettings = new javax.swing.JPanel();
        _jCheckBoxEnableMMF = new javax.swing.JCheckBox();
        _jTextFieldMMFile = new javax.swing.JTextField();
        jLabelSize = new javax.swing.JLabel();
        _jSpinnerMMFSize = new javax.swing.JSpinner();
        jLabelMB = new javax.swing.JLabel();
        _jButtonOKMMF = new javax.swing.JButton();
        _jButtonApplyMMF = new javax.swing.JButton();
        _jButtonCancelMMF = new javax.swing.JButton();
        jTextAreaMMFStatus = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Remote Access Setup");
        setResizable(false);

        _jTabbedPaneRemoteOptions.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        _jButtonCancel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonCancel.setText("Cancel");
        _jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonCancelActionPerformed(evt);
            }
        });

        _jPanelConnectionSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection settings"));

        _jLabelRemote.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jLabelRemote.setText("Remote acess of GeckoCIRCUITS is");

        _jRadioButtonEnabled.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jRadioButtonEnabled.setText("Enabled");
        _jRadioButtonEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jRadioButtonEnabledActionPerformed(evt);
            }
        });

        _jRadioButtonDisabled.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jRadioButtonDisabled.setText("Disabled");
        _jRadioButtonDisabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jRadioButtonDisabledActionPerformed(evt);
            }
        });

        _jLabelPort.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jLabelPort.setText("at port:");

        _jFormattedTextFieldPort.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#####"))));
        _jFormattedTextFieldPort.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        _jRadioButtonLocalHostOnly.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jRadioButtonLocalHostOnly.setText("Local machine");
        _jRadioButtonLocalHostOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jRadioButtonLocalHostOnlyActionPerformed(evt);
            }
        });

        _jRadioButtonNetwork.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jRadioButtonNetwork.setText("Network");
        _jRadioButtonNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jRadioButtonNetworkActionPerformed(evt);
            }
        });

        _jLabelFrom.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jLabelFrom.setText("from the ");

        _jComboBoxIPs.setBackground(new java.awt.Color(255, 255, 255));
        _jComboBoxIPs.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        _jLabelByAddress.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jLabelByAddress.setText("via:");

        javax.swing.GroupLayout _jPanelConnectionSettingsLayout = new javax.swing.GroupLayout(_jPanelConnectionSettings);
        _jPanelConnectionSettings.setLayout(_jPanelConnectionSettingsLayout);
        _jPanelConnectionSettingsLayout.setHorizontalGroup(
            _jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(_jPanelConnectionSettingsLayout.createSequentialGroup()
                .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(_jPanelConnectionSettingsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(_jPanelConnectionSettingsLayout.createSequentialGroup()
                                    .addComponent(_jRadioButtonEnabled)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(_jRadioButtonDisabled))
                                .addComponent(_jLabelRemote, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(_jPanelConnectionSettingsLayout.createSequentialGroup()
                                    .addComponent(_jRadioButtonLocalHostOnly)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(_jRadioButtonNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, _jPanelConnectionSettingsLayout.createSequentialGroup()
                                    .addComponent(_jLabelPort)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(_jFormattedTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(_jLabelFrom))))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, _jPanelConnectionSettingsLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(_jLabelByAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(_jComboBoxIPs, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        _jPanelConnectionSettingsLayout.setVerticalGroup(
            _jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(_jPanelConnectionSettingsLayout.createSequentialGroup()
                .addComponent(_jLabelRemote)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_jRadioButtonEnabled)
                    .addComponent(_jRadioButtonDisabled))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_jLabelPort)
                    .addComponent(_jFormattedTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_jLabelFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_jRadioButtonLocalHostOnly)
                    .addComponent(_jRadioButtonNetwork))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(_jPanelConnectionSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_jComboBoxIPs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_jLabelByAddress)))
        );

        _jButtonOK.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonOK.setText("OK");
        _jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonOKActionPerformed(evt);
            }
        });

        _jButtonApply.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonApply.setText("Apply");
        _jButtonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonApplyActionPerformed(evt);
            }
        });

        _jButtonTest.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonTest.setText("Connection test");
        _jButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonTestActionPerformed(evt);
            }
        });

        jTextAreaRemoteTest.setBackground(new java.awt.Color(238, 238, 238));
        jTextAreaRemoteTest.setColumns(20);
        jTextAreaRemoteTest.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jTextAreaRemoteTest.setRows(5);

        _jButtonRefresh.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonRefresh.setText("Refresh IPs");
        _jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRemoteSettingsLayout = new javax.swing.GroupLayout(jPanelRemoteSettings);
        jPanelRemoteSettings.setLayout(jPanelRemoteSettingsLayout);
        jPanelRemoteSettingsLayout.setHorizontalGroup(
            jPanelRemoteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_jPanelConnectionSettings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelRemoteSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRemoteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelRemoteSettingsLayout.createSequentialGroup()
                        .addGroup(jPanelRemoteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextAreaRemoteTest, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelRemoteSettingsLayout.createSequentialGroup()
                                .addComponent(_jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(_jButtonApply, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(_jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(jPanelRemoteSettingsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(_jButtonTest)
                        .addGap(18, 18, 18)
                        .addComponent(_jButtonRefresh)
                        .addGap(37, 37, 37))))
        );
        jPanelRemoteSettingsLayout.setVerticalGroup(
            jPanelRemoteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRemoteSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(_jPanelConnectionSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelRemoteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_jButtonTest)
                    .addComponent(_jButtonRefresh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextAreaRemoteTest, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelRemoteSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_jButtonOK)
                    .addComponent(_jButtonApply)
                    .addComponent(_jButtonCancel))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        _jTabbedPaneRemoteOptions.addTab("Settings", jPanelRemoteSettings);

        jTextAreaRemoteInfo.setBackground(new java.awt.Color(238, 238, 238));
        jTextAreaRemoteInfo.setColumns(20);
        jTextAreaRemoteInfo.setRows(5);
        jTextAreaRemoteInfo.setText("Here you can allow the control of a \nGeckoCIRCUITS simulation by another\napplication (e.g. MATLAB) via a network \nport. For details see the GeckoSCRIPT\ntutorial. You can set GeckoCIRCUITS to be\naccessible from the local machine (i.e. MATLAB \nrunning on the same computer as this\ninstance of GeckoCIRCUITS) or from another\nmachine via a network. In the latter case, be sure\nto select the correct IP address of your machine to\nuse (i.e. LAN address if the other computer is on\nyour local network or the external address if the\nother computer is elsewhere e.g. the Internet). \nIf you are behind a router using NAT, make sure\nthat port forwarding (if necessary) is set up \ncorrectly.\nIf you cannot use the network for remote access,\ngo the \"Alternative Interface\" tab.");

        javax.swing.GroupLayout jPanelRemoteInfoLayout = new javax.swing.GroupLayout(jPanelRemoteInfo);
        jPanelRemoteInfo.setLayout(jPanelRemoteInfoLayout);
        jPanelRemoteInfoLayout.setHorizontalGroup(
            jPanelRemoteInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRemoteInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextAreaRemoteInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRemoteInfoLayout.setVerticalGroup(
            jPanelRemoteInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRemoteInfoLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jTextAreaRemoteInfo)
                .addContainerGap())
        );

        _jTabbedPaneRemoteOptions.addTab("Info", jPanelRemoteInfo);

        jScrollPaneMMF.setBorder(null);

        jTextAreaMMF.setBackground(new java.awt.Color(238, 238, 238));
        jTextAreaMMF.setColumns(20);
        jTextAreaMMF.setRows(5);
        jTextAreaMMF.setText("If you are unable to use remote access via a \nnetwork report (e.g. your network administrator\nhas a very restrictive policy) you can use the\nalternative interface via a memory-mapped file.\n\nThis can be used to control GeckoCIRCUITS from\nthe local machine only. Specify below the file\nname and the size it will take up in memory.\nWhen specifying the size, be mindful of the size\nof the data you expect GeckoCIRCUITS to send\nout (e.g. waveform time and data series).");
        jScrollPaneMMF.setViewportView(jTextAreaMMF);

        jPanelMMFSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection Settings"));

        _jCheckBoxEnableMMF.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jCheckBoxEnableMMF.setText("Enable remote access via file:");
        _jCheckBoxEnableMMF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jCheckBoxEnableMMFActionPerformed(evt);
            }
        });

        _jTextFieldMMFile.setText("remote_access.txt");

        jLabelSize.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelSize.setText("of size:");

        _jSpinnerMMFSize.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jSpinnerMMFSize.setModel(new javax.swing.SpinnerNumberModel(10, 1, 300, 1));

        jLabelMB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabelMB.setText("MB");

        javax.swing.GroupLayout jPanelMMFSettingsLayout = new javax.swing.GroupLayout(jPanelMMFSettings);
        jPanelMMFSettings.setLayout(jPanelMMFSettingsLayout);
        jPanelMMFSettingsLayout.setHorizontalGroup(
            jPanelMMFSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMMFSettingsLayout.createSequentialGroup()
                .addGroup(jPanelMMFSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMMFSettingsLayout.createSequentialGroup()
                        .addComponent(_jTextFieldMMFile, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabelSize)
                        .addGap(1, 1, 1)
                        .addComponent(_jSpinnerMMFSize, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelMB))
                    .addComponent(_jCheckBoxEnableMMF))
                .addGap(0, 4, Short.MAX_VALUE))
        );
        jPanelMMFSettingsLayout.setVerticalGroup(
            jPanelMMFSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMMFSettingsLayout.createSequentialGroup()
                .addComponent(_jCheckBoxEnableMMF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMMFSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_jTextFieldMMFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSize)
                    .addComponent(_jSpinnerMMFSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMB)))
        );

        _jButtonOKMMF.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonOKMMF.setText("OK");
        _jButtonOKMMF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonOKMMFActionPerformed(evt);
            }
        });

        _jButtonApplyMMF.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonApplyMMF.setText("Apply");
        _jButtonApplyMMF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonApplyMMFActionPerformed(evt);
            }
        });

        _jButtonCancelMMF.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        _jButtonCancelMMF.setText("Cancel");
        _jButtonCancelMMF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _jButtonCancelMMFActionPerformed(evt);
            }
        });

        jTextAreaMMFStatus.setBackground(new java.awt.Color(238, 238, 238));
        jTextAreaMMFStatus.setColumns(20);
        jTextAreaMMFStatus.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jTextAreaMMFStatus.setRows(5);

        javax.swing.GroupLayout jPanelMMFLayout = new javax.swing.GroupLayout(jPanelMMF);
        jPanelMMF.setLayout(jPanelMMFLayout);
        jPanelMMFLayout.setHorizontalGroup(
            jPanelMMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMMFSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMMFLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(_jButtonOKMMF, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_jButtonApplyMMF, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_jButtonCancelMMF, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPaneMMF)
            .addComponent(jTextAreaMMFStatus)
        );
        jPanelMMFLayout.setVerticalGroup(
            jPanelMMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMMFLayout.createSequentialGroup()
                .addComponent(jScrollPaneMMF, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelMMFSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextAreaMMFStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMMFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelMMFLayout.createSequentialGroup()
                            .addComponent(_jButtonCancelMMF)
                            .addGap(12, 12, 12))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMMFLayout.createSequentialGroup()
                            .addComponent(_jButtonOKMMF)
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMMFLayout.createSequentialGroup()
                        .addComponent(_jButtonApplyMMF)
                        .addContainerGap())))
        );

        _jTabbedPaneRemoteOptions.addTab("Alternative Interface", jPanelMMF);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_jTabbedPaneRemoteOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 312, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(_jTabbedPaneRemoteOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 341, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event__jButtonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event__jButtonCancelActionPerformed

    private void processUserInput() {
        try {
            String selectedIP;
            final String oldIP = GeckoRemoteRegistry.getIPAddress();
            if (_jRadioButtonLocalHostOnly.isSelected()) {
                selectedIP = "127.0.0.1";
            } else {
                final int selectedIPIndex = _jComboBoxIPs.getSelectedIndex();
                final int addresses = _jComboBoxIPs.getItemCount();
                if (addresses == 0) {
                    selectedIP = "127.0.0.1";
                } else if (addresses >= _localIPs.length && selectedIPIndex < _localIPs.length) {
                    selectedIP = _localIPs[selectedIPIndex];
                } else {
                    selectedIP = _externalIP;
                }
            }
            GeckoRemoteRegistry.setIPAddress(selectedIP);
            GeckoRemoteRegistry.setRemoteAccessPort(Integer.parseInt(_jFormattedTextFieldPort.getText()));
            if (_jRadioButtonDisabled.isSelected()) {
                GeckoRemoteRegistry.disableRemotePort();
            } else {
                if (!selectedIP.equals(oldIP)) {
                    GeckoRemoteRegistry.disableRemotePort(); //if selected IP has changed, should first disable old configuration
                }
                GeckoRemoteRegistry.enableRemotePort();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error with remote access", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    /**
     * Enable/disable GUI input fields properly.
     */
    private void checkButtons() {
        _jFormattedTextFieldPort.setEnabled(_jRadioButtonEnabled.isSelected());
        _jRadioButtonLocalHostOnly.setEnabled(_jRadioButtonEnabled.isSelected());
        _jRadioButtonNetwork.setEnabled(_jRadioButtonEnabled.isSelected());
        _jLabelPort.setEnabled(_jRadioButtonEnabled.isSelected());
        _jLabelFrom.setEnabled(_jRadioButtonEnabled.isSelected());
        _jLabelByAddress.setEnabled(_jRadioButtonEnabled.isSelected() && _jRadioButtonNetwork.isSelected());
        _jComboBoxIPs.setEnabled(_jRadioButtonEnabled.isSelected() && _jRadioButtonNetwork.isSelected());
        _jTextFieldMMFile.setEnabled(_jCheckBoxEnableMMF.isSelected());
        _jSpinnerMMFSize.setEnabled(_jCheckBoxEnableMMF.isSelected());
    }
    
    /**
     * Get the IP numbers that can be used for connecting to GeckoCIRCUITS via the network.
     */
    private void getIPNumbers() {
        try {
            _localIPs = GeckoRemoteRegistry.getMachineIPNumbers();
            for (String ip : _localIPs) {
                _jComboBoxIPs.addItem(ip + " (LAN)");
            }
        } catch (SocketException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error getting the local IP numbers of this machine:\n"
                    + ex.getMessage()
                    + "\nGeckoCIRCUITS may not be accessible from the network on your computer.",
                                        "Error getting local IPs!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            _externalIP = GeckoRemoteRegistry.getExternalIPAddress();
            _jComboBoxIPs.addItem(_externalIP + " (ext.)");
        } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(this,
                    "Could not resolve address of web site used to determine\n"
                    + " your external (visible from the Internet) IP address:"
                    + ex.getMessage()
                    + "\nGeckoCIRCUITS may not be accessible from outside your local network.",
                                        "Error getting external IP!",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException xe) {
            JOptionPane.showMessageDialog(this,
                    "Could not read from the web site used to determine\n"
                    + " your external (visible from the Internet) IP address:"
                    + xe.getMessage()
                    + "\nGeckoCIRCUITS may not be accessible from outside your local network.",
                                        "Error getting external IP!",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        if (_localIPs == null || _localIPs.length == 0) {
            if (_externalIP == null) {
                JOptionPane.showMessageDialog(this,
                    "Could not find any IP addresses for your machine."
                    + "\nYour network interfaces might be all inactive or you may have no network"
                        +"\nor internet connection. GeckoCIRCUITS is currently accessible from the"
                        +"\nlocal machine only.",
                                        "Error getting IPs!",
                    JOptionPane.ERROR_MESSAGE);
                    _jRadioButtonLocalHostOnly.setSelected(true);
                    checkButtons();
            } else {
                JOptionPane.showMessageDialog(this,
                        "Only an external (i.e. visible from the internet) IP address was"
                        + "\nfound. GeckoCIRCUITS may not be accessible from another machine.",
                        "Only external IP found",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    private void processUserInputMMF() {
        try {
            if (_jCheckBoxEnableMMF.isSelected()) { //if user wants to enable access
                if (Fenster._mmf_access == null) {
                    Fenster._mmf_access = new GeckoCustomMMF(Fenster._scripter);
                }
                final String fileName = _jTextFieldMMFile.getText();
                final long fileSize = (Integer) _jSpinnerMMFSize.getValue() * 1024l * 1024l;
                if (!Fenster._mmf_access.isEnabled()) {
                    Fenster._mmf_access.enableAccess(fileName, fileSize);
                } else {
                    final String existingFile = Fenster._mmf_access.getFile();
                    final long existingSize = Fenster._mmf_access.getFileSize();
                    //check if access already enabled with the same parameters
                    if ((!fileName.equals(existingFile)) && fileSize != existingSize) {
                        Fenster._mmf_access.disableAccess();
                        Fenster._mmf_access.enableAccess(fileName, fileSize);
                    }
                }
                checkStatusMMF();
            } else {
                if (Fenster._mmf_access != null) {
                    if (Fenster._mmf_access.isEnabled()) {
                        Fenster._mmf_access.disableAccess();
                    }
                }
                checkStatusMMF();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error with memory-mapped access", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }
    
    private void checkStatusMMF() {
        if (Fenster._mmf_access == null) {
            jTextAreaMMFStatus.setText("Status: access via m.m.f. is not enabled.");
        } else {
            jTextAreaMMFStatus.setText(Fenster._mmf_access.getStatus());
        }
    }

    private void _jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event__jButtonOKActionPerformed
        processUserInput();
        this.dispose();
    }//GEN-LAST:event__jButtonOKActionPerformed

    private void _jButtonTestActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event__jButtonTestActionPerformed
        jTextAreaRemoteTest.setText(GeckoCustomRemote.getClientInfo());
    }//GEN-LAST:event__jButtonTestActionPerformed

    private void _jButtonApplyActionPerformed(java.awt.event.ActionEvent evt) {//NOPMD//GEN-FIRST:event__jButtonApplyActionPerformed
        processUserInput();
    }//GEN-LAST:event__jButtonApplyActionPerformed

    private void _jRadioButtonDisabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jRadioButtonDisabledActionPerformed
        checkButtons();
    }//GEN-LAST:event__jRadioButtonDisabledActionPerformed

    private void _jRadioButtonEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jRadioButtonEnabledActionPerformed
        checkButtons();
    }//GEN-LAST:event__jRadioButtonEnabledActionPerformed

    private void _jRadioButtonLocalHostOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jRadioButtonLocalHostOnlyActionPerformed
        checkButtons();
    }//GEN-LAST:event__jRadioButtonLocalHostOnlyActionPerformed

    private void _jRadioButtonNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jRadioButtonNetworkActionPerformed
        checkButtons();
    }//GEN-LAST:event__jRadioButtonNetworkActionPerformed

    private void _jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jButtonRefreshActionPerformed
        getIPNumbers();
    }//GEN-LAST:event__jButtonRefreshActionPerformed

    private void _jButtonCancelMMFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jButtonCancelMMFActionPerformed
        this.dispose();
    }//GEN-LAST:event__jButtonCancelMMFActionPerformed

    private void _jButtonApplyMMFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jButtonApplyMMFActionPerformed
        processUserInputMMF();
    }//GEN-LAST:event__jButtonApplyMMFActionPerformed

    private void _jButtonOKMMFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jButtonOKMMFActionPerformed
        processUserInputMMF();
        this.dispose();
    }//GEN-LAST:event__jButtonOKMMFActionPerformed

    private void _jCheckBoxEnableMMFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__jCheckBoxEnableMMFActionPerformed
        checkButtons();
    }//GEN-LAST:event__jCheckBoxEnableMMFActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _jButtonApply;
    private javax.swing.JButton _jButtonApplyMMF;
    private javax.swing.JButton _jButtonCancel;
    private javax.swing.JButton _jButtonCancelMMF;
    private javax.swing.JButton _jButtonOK;
    private javax.swing.JButton _jButtonOKMMF;
    private javax.swing.JButton _jButtonRefresh;
    private javax.swing.JButton _jButtonTest;
    private javax.swing.JCheckBox _jCheckBoxEnableMMF;
    private javax.swing.JComboBox _jComboBoxIPs;
    private javax.swing.JFormattedTextField _jFormattedTextFieldPort;
    private javax.swing.JLabel _jLabelByAddress;
    private javax.swing.JLabel _jLabelFrom;
    private javax.swing.JLabel _jLabelPort;
    private javax.swing.JLabel _jLabelRemote;
    private javax.swing.JPanel _jPanelConnectionSettings;
    private javax.swing.JRadioButton _jRadioButtonDisabled;
    private javax.swing.JRadioButton _jRadioButtonEnabled;
    private javax.swing.JRadioButton _jRadioButtonLocalHostOnly;
    private javax.swing.JRadioButton _jRadioButtonNetwork;
    private javax.swing.JSpinner _jSpinnerMMFSize;
    private javax.swing.JTabbedPane _jTabbedPaneRemoteOptions;
    private javax.swing.JTextField _jTextFieldMMFile;
    private javax.swing.JLabel jLabelMB;
    private javax.swing.JLabel jLabelSize;
    private javax.swing.JPanel jPanelMMF;
    private javax.swing.JPanel jPanelMMFSettings;
    private javax.swing.JPanel jPanelRemoteInfo;
    private javax.swing.JPanel jPanelRemoteSettings;
    private javax.swing.JScrollPane jScrollPaneMMF;
    private javax.swing.JTextArea jTextAreaMMF;
    private javax.swing.JTextArea jTextAreaMMFStatus;
    private javax.swing.JTextArea jTextAreaRemoteInfo;
    private javax.swing.JTextArea jTextAreaRemoteTest;
    // End of variables declaration//GEN-END:variables

    private void doInternationalization() {
        _jButtonOK.setText(I18nKeys.OK.getTranslation());
        _jButtonCancel.setText(I18nKeys.CANCEL.getTranslation());
        _jButtonApply.setText(I18nKeys.APPLY.getTranslation());
        _jButtonTest.setText(I18nKeys.CONNECTION_TEST.getTranslation());
        _jLabelPort.setText(I18nKeys.AT_PORT.getTranslation());
        _jRadioButtonEnabled.setText(I18nKeys.ENABLED.getTranslation());
        _jRadioButtonDisabled.setText(I18nKeys.DISABLED.getTranslation());
        _jTabbedPaneRemoteOptions.setTitleAt(0, I18nKeys.SETTINGS.getTranslation());
        _jTabbedPaneRemoteOptions.setTitleAt(1, I18nKeys.INFO.getTranslation());
        _jPanelConnectionSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(I18nKeys.CONNECTION_SETTINGS.getTranslation()));
        _jLabelRemote.setText(I18nKeys.REMOTE_ACCESS_OF_GECKOCIRCUITS_IS.getTranslation());
    }
}
