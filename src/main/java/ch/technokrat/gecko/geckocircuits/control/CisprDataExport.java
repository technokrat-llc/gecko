/*  This file is part of GeckoCIRCUITS. Copyright (C) ETH Zurich, Gecko-Simulations AG
 *
 *  GeckoCIRCUITS is free software: you can redistribute it and/or modify it under 
 *  the terms of the GNU General Public License as published by the Free Software 
 *  Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *  GeckoCIRCUITS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *  PURPOSE.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  GeckoCIRCUITS.  If not, see <http://www.gnu.org/licenses/>.
 */
package ch.technokrat.gecko.geckocircuits.control;

import ch.technokrat.gecko.geckocircuits.allg.GeckoFileChooser;
import ch.technokrat.gecko.geckocircuits.datacontainer.AbstractDataContainer;
import ch.technokrat.gecko.geckocircuits.newscope.GeckoDialog;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import javax.swing.JOptionPane;

public class CisprDataExport extends GeckoDialog {

    private final AbstractDataContainer _dataContainer;

    public CisprDataExport(final TestReceiverWindow parent, final Cispr16Settings settings,
            final AbstractDataContainer dataContainer) {
        super(parent, true);
        initComponents();
        jButtonSaveDB.setText("Save dB \u00B5Volt");
        _dataContainer = dataContainer;
        jRadioButtonQp.setVisible(settings._qpeak.getValue());
        jRadioButtonPeak.setVisible(settings._peak.getValue());
        jRadioButtonAverage.setVisible(settings._average.getValue());
        jTextFieldFile.setText(GeckoFileChooser.calculateCheckedCurrentDirectory(null).getAbsolutePath().replace(".ipes", ".txt"));

    }

    private static float calculateInverseDbMu(final double value) {
        return (float) (1e-6 * Math.exp(Math.log(10) * value / 20));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButtonSaveDB = new javax.swing.JButton();
        jButtonSaveVolts = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jRadioButtonMax = new javax.swing.JRadioButton();
        jRadioButtonPeak = new javax.swing.JRadioButton();
        jRadioButtonQp = new javax.swing.JRadioButton();
        jRadioButtonAverage = new javax.swing.JRadioButton();
        jRadioButtonMin = new javax.swing.JRadioButton();
        jRadioButtonFourier = new javax.swing.JRadioButton();
        jTextFieldFile = new javax.swing.JTextField();
        jButtonFileChooser = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Save CISPR Data");

        jButtonSaveDB.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonSaveDB.setText("Save dB uVolt");
        jButtonSaveDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveDBActionPerformed(evt);
            }
        });

        jButtonSaveVolts.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonSaveVolts.setText("Save Volt");
        jButtonSaveVolts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveVoltsActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonMax);
        jRadioButtonMax.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonMax.setText("Maximum estimation");

        buttonGroup1.add(jRadioButtonPeak);
        jRadioButtonPeak.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonPeak.setText("Peak");
        jRadioButtonPeak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonPeakActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonQp);
        jRadioButtonQp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonQp.setText("Quasi-Peak");

        buttonGroup1.add(jRadioButtonAverage);
        jRadioButtonAverage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonAverage.setText("Average");

        buttonGroup1.add(jRadioButtonMin);
        jRadioButtonMin.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonMin.setText("Minimum estimation");

        buttonGroup1.add(jRadioButtonFourier);
        jRadioButtonFourier.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonFourier.setSelected(true);
        jRadioButtonFourier.setText("Fourier");

        jTextFieldFile.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jTextFieldFile.setText("jTextField1");

        jButtonFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFileChooserActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Please select data row to save");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("File name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonSaveDB, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonSaveVolts, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButtonMin)
                                            .addComponent(jRadioButtonFourier))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jRadioButtonMax)
                                    .addComponent(jRadioButtonPeak)
                                    .addComponent(jRadioButtonQp)
                                    .addComponent(jRadioButtonAverage)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonMax)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonPeak)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonQp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonAverage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonMin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonFourier)
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSaveDB)
                    .addComponent(jButtonSaveVolts)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doSave(final boolean useDBMu) {
            int dataIndex = -1;
            if (jRadioButtonMax.isSelected()) {                
                dataIndex = TestReceiverWindow.INDEX_MAX_EST;
            } else if (jRadioButtonPeak.isSelected()) {
                dataIndex = TestReceiverWindow.INDEX_PEAK;
            } else if (jRadioButtonQp.isSelected()) {
                dataIndex = TestReceiverWindow.INDEX_QUASI_PEAK;
            } else if (jRadioButtonAverage.isSelected()) {
                dataIndex = TestReceiverWindow.INDEX_AVERAGE;
            } else if (jRadioButtonMin.isSelected()) {
                dataIndex = TestReceiverWindow.INDEX_MINIMUM_EST;
            } else if (jRadioButtonFourier.isSelected()) {
                dataIndex = TestReceiverWindow.INDEX_FOURIER;
            }
            saveData(dataIndex, _dataContainer, new File(jTextFieldFile.getText()), useDBMu);
    }        
    

    public static void saveData(final int dataIndex, final AbstractDataContainer dataContainer, final File file,
            final boolean useDBMu) {
        try {            
            final FileWriter fileWriter = new FileWriter(file);
            final BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
            for (int i = 0; i < dataContainer.getMaximumTimeIndex(0); i++) {
                float value = dataContainer.getValue(dataIndex, i);
                if (!useDBMu) {
                    value = calculateInverseDbMu(value);
                }
                if (value == value) {
                    bufferedWriter.write(dataContainer.getTimeValue(i, 0) + " " + value + "\n");
                }
            }
            bufferedWriter.close();
        } catch (Throwable ex) {            
            
            JOptionPane.showMessageDialog(null,
                    ex.getMessage() + "\n" + ex.toString(), "Error while saving file",
                    JOptionPane.ERROR_MESSAGE);
            throw new RuntimeException("Error saving to file " + file, ex);
        }
    }

    private void jButtonSaveDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveDBActionPerformed
        doSave(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonSaveDBActionPerformed

    private void jRadioButtonPeakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonPeakActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jRadioButtonPeakActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonSaveVoltsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveVoltsActionPerformed
        doSave(false);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonSaveVoltsActionPerformed

    private void jButtonFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFileChooserActionPerformed
        GeckoFileChooser fileChooser = GeckoFileChooser.createSaveFileChooser(".txt", "plain-text ascii data", this, null);
        if (fileChooser.getUserResult() == GeckoFileChooser.FileChooserResult.CANCEL) {
            return;
        }
        final String fileName = fileChooser.getFileWithCheckedEnding().getAbsolutePath();
        jTextFieldFile.setText(fileName);
    }//GEN-LAST:event_jButtonFileChooserActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonFileChooser;
    private javax.swing.JButton jButtonSaveDB;
    private javax.swing.JButton jButtonSaveVolts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButtonAverage;
    private javax.swing.JRadioButton jRadioButtonFourier;
    private javax.swing.JRadioButton jRadioButtonMax;
    private javax.swing.JRadioButton jRadioButtonMin;
    private javax.swing.JRadioButton jRadioButtonPeak;
    private javax.swing.JRadioButton jRadioButtonQp;
    private javax.swing.JTextField jTextFieldFile;
    // End of variables declaration//GEN-END:variables
}
